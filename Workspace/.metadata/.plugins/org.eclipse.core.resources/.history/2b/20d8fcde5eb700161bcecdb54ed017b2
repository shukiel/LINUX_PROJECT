import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.logging.Level;
import java.util.logging.Logger;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.PasswordField;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextArea;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import javafx.stage.Screen;
import javafx.stage.Stage;

public final class UnixProjectUI extends Application {
	private final double SCREEN_HEIGHT = Screen.getPrimary().getVisualBounds().getHeight();
	private final double SCREEN_WIDTH = Screen.getPrimary().getVisualBounds().getWidth();
	private final String TEMP_FILE_NAME = File.separator + "temp";
	private Desktop desktop = Desktop.getDesktop();
	private File inputFile;
	private static TextArea ta = new TextArea();
	private ToggleGroup group = new ToggleGroup();

	@Override
	public void start(final Stage stage) {
		stage.setTitle("Enosh & Zuki Project");
		double paneWidth = SCREEN_WIDTH / 2;
		double paneHeight = SCREEN_HEIGHT / 2;
		final FileChooser fileChooser = new FileChooser();
		final Button openButton = new Button("Select a File...");
		final Button encryptButton = new Button("DES");
		final Text enterKey = new Text("Enter 8 characters long key:");
		final PasswordField  keyField = new PasswordField();
		enterKey.setVisible(false);
		keyField.setVisible(false);
		encryptButton.setDisable(true);
		
		RadioButton rb1 = new RadioButton("Encrypt");
		rb1.setUserData(true);
		rb1.setToggleGroup(group);
		rb1.setSelected(true);

		RadioButton rb2 = new RadioButton("Decrypt");
		rb2.setUserData(false);
		rb2.setToggleGroup(group);

		rb1.setDisable(true);
		rb2.setDisable(true);

		openButton.setOnAction(e -> {
			inputFile = fileChooser.showOpenDialog(stage);
			if (inputFile != null) {
				printToTextAreaConsole(inputFile.getAbsolutePath() + " is loaded!");
				// encryptButton.setDisable(false);
				enterKey.setVisible(true);
				keyField.setVisible(true);
			}
		});
		keyField.setOnAction(e -> {
			if (keyField.getText().length() != 8) {
				printToTextAreaConsole("Wrong key size!!");
				encryptButton.setDisable(true);
				rb1.setDisable(true);
				rb2.setDisable(true);
			} else {
				printToTextAreaConsole("Valid Key Inseted");
				encryptButton.setDisable(false);
				rb1.setDisable(false);
				rb2.setDisable(false);
			}
		});
		encryptButton.setOnAction(e -> {
			try {
				runDesScript(inputFile, keyField.getText(), (boolean) group.getSelectedToggle().getUserData());
				openFile(inputFile);
			} catch (Exception e1) {
				e1.printStackTrace();
			}

		});
		// String perlScript = "C:\\perl_test\\test111.pl";

		// runScript(perlScript);
		final HBox hbox = new HBox(12);
		hbox.getChildren().addAll(openButton, encryptButton, enterKey, keyField);
		final HBox rbhbox = new HBox(12);
		rbhbox.getChildren().addAll(rb1, rb2);

		final VBox rootGroup = new VBox(12);
		Scene scene = new Scene(new ScrollPane(rootGroup), paneWidth, paneHeight);
		ta.setPrefWidth(scene.getWidth() - scene.getWidth() * 0.05);
		ta.setPrefHeight(scene.getHeight() - scene.getHeight() * 0.15);
		rootGroup.getChildren().addAll(hbox, rbhbox, new ScrollPane(ta));
		rootGroup.setPadding(new Insets(12, 12, 12, 12));

		stage.setScene(scene);
		stage.show();
	}

	private static void printToTextAreaConsole(String txt) {
		Platform.runLater(() -> ta.appendText(txt + "\n"));
	}

	private void runScript(String perlScript) throws IOException, InterruptedException {
		Process p = new ProcessBuilder("perl", perlScript).start();

		addPrintToConsole(p);
		p.waitFor();
	}

	private void runDesScript(File inputFile, String key, boolean isEncrypt) throws IOException, InterruptedException {
		String filePath = inputFile.getAbsolutePath();
		String tempFilePath = inputFile.getParent() + TEMP_FILE_NAME;
		printToTextAreaConsole("Starting DES");
		String perlScript = "/Users/enoshcohen/Dropbox/School/Afeka/3rd year/UNIX/Final Project/DES.pl";
		int encrypt = isEncrypt ? 1 : 0;
		Process p = new ProcessBuilder("perl", perlScript, filePath, tempFilePath, key, Integer.toString(encrypt))
				.start();
		addPrintToConsole(p);
		p.waitFor();
		File encryptedFile = new File(tempFilePath);
		Files.copy(encryptedFile.toPath(), inputFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
		printToTextAreaConsole("Done...");
	}
	
	private static void runRSAScript( String text  ,boolean isEncrypt) throws IOException, InterruptedException {
		printToTextAreaConsole("Starting RSA");
		String perlScript = "/Users/enoshcohen/Dropbox/School/Afeka/3rd year/UNIX/Final Project/RSA.pl";
		String genKeyPath = "/Users/enoshcohen/Dropbox/School/Afeka/3rd year/UNIX/Final Project/genKey.pl";
		int encrypt = isEncrypt ? 1 : 0;
		
		Process genKey = new ProcessBuilder("perl", " ", genKeyPath).start();
		genKey.waitFor();
		addPrintToConsole(genKey);
		//Process rsa = new ProcessBuilder("perl", perlScript, Integer.toString(encrypt), "`cat key`" , text, ">", "CryptedRSA")
		//		.start();
		//addPrintToConsole(rsa);
		//rsa.waitFor();
		printToTextAreaConsole("Done...");
	}

	private static void addPrintToConsole(Process rsa) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(rsa.getInputStream()));
		StringBuilder builder = new StringBuilder();
		String line = null;
		while ((line = reader.readLine()) != null) {
			builder.append(line);
			builder.append(System.getProperty("line.separator"));
		}
		String result = builder.toString();
		printToTextAreaConsole(result);
	}

	private void openFile(File file) {
		try {
			desktop.open(file);
		} catch (IOException ex) {
			Logger.getLogger(UnixProjectUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public static void main(String[] args) throws IOException, InterruptedException {
		runRSAScript("12345678", true);
		Application.launch(args);
	}
}