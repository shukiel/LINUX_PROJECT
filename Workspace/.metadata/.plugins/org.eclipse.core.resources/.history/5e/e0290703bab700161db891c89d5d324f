import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.ProcessBuilder.Redirect;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.PasswordField;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import javafx.stage.Screen;
import javafx.stage.Stage;

public final class UnixProjectUI extends Application {
	private final boolean isAutoFillKeys = true;
	private final double SCREEN_HEIGHT = Screen.getPrimary().getVisualBounds().getHeight();
	private final double SCREEN_WIDTH = Screen.getPrimary().getVisualBounds().getWidth();
	private final String TEMP_FILE_NAME = File.separator + "temp";
	private Desktop desktop = Desktop.getDesktop();
	private File inputFile;
	private Properties properties;
	private TextArea taConsole = new TextArea();
	private PasswordField tfDesKey = new PasswordField();
	private TextField tfRsaKeys = new TextField();
	private TextField tfCryptedDesKey = new TextField();
	private FileChooser fileChooser = new FileChooser();
	private Button buttonOpenFile = new Button("Select a File...");
	private Button buttonGo = new Button("Go!");
	private Text textEnterKey = new Text("Enter 8 characters long key:");
	private Text enterRsaKeys = new Text("Enter RSA Keys:");
	private Text enterCryptedKey = new Text("Enter crypted Key:");
	private ToggleGroup radioButttonsGroup = new ToggleGroup();
	private RadioButton rbEncrypt = new RadioButton("Encrypt");
	private RadioButton rbDecrypt = new RadioButton("Decrypt");

	@Override
	public void start(final Stage stage) {
		initGui(stage);
		printToTextAreaConsole("First, select a file");
		properties = loadProperties();
	}

	private void initGui(final Stage stage) {
		stage.setTitle("Enosh & Zuki Project");
		double paneWidth = SCREEN_WIDTH / 2;
		double paneHeight = SCREEN_HEIGHT / 2;
		enterRsaKeys.setVisible(false);
		enterCryptedKey.setVisible(false);
		tfRsaKeys.setVisible(false);
		tfCryptedDesKey.setVisible(false);
		buttonGo.setDisable(true);
		rbEncrypt.setUserData(true);
		rbEncrypt.setSelected(true);
		
		rbEncrypt.setToggleGroup(radioButttonsGroup);
		rbDecrypt.setUserData(false);
		rbDecrypt.setToggleGroup(radioButttonsGroup);
		rbDecrypt.setOnAction(e -> setGuiForDecrypt());
		rbEncrypt.setOnAction(e -> setGuiForEncrypt());
		buttonOpenFile.setOnAction(e -> openFileAction(stage));
		buttonGo.setOnAction(e -> goButtonAction());

		final HBox hbox = new HBox(12);
		hbox.getChildren().addAll(buttonOpenFile, buttonGo, textEnterKey, tfDesKey);
		final HBox rbhbox = new HBox(12);
		rbhbox.getChildren().addAll(rbEncrypt, rbDecrypt);
		final HBox rsahbox = new HBox(12);
		rsahbox.getChildren().addAll(enterRsaKeys, tfRsaKeys, enterCryptedKey, tfCryptedDesKey);

		final VBox mainPane = new VBox(12);
		Scene scene = new Scene(new ScrollPane(mainPane), paneWidth, paneHeight);
		taConsole.setPrefWidth(scene.getWidth() - scene.getWidth() * 0.05);
		taConsole.setPrefHeight(scene.getHeight() - scene.getHeight() * 0.15);
		mainPane.getChildren().addAll(hbox, rsahbox, rbhbox, new ScrollPane(taConsole));
		mainPane.setPadding(new Insets(12, 12, 12, 12));

		stage.setScene(scene);
		stage.show();
	}

	private void goButtonAction() {
		try {
			boolean isEncrypted = (boolean) radioButttonsGroup.getSelectedToggle().getUserData();
			if (isEncrypted) {
				if (verifyDesKeyInput()) {
					runEncrypt();
				}
			} else {
				runDecrypt();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void runDecrypt() throws IOException, InterruptedException {
		boolean isEncrypted = false;
		String key = runRSAScript(tfCryptedDesKey.getText(), isEncrypted);
		runDesScript(inputFile, key, isEncrypted);
		openFile(inputFile);
	}

	private void runEncrypt() throws IOException, InterruptedException {
		boolean isEncrypted = true;
		String key = tfDesKey.getText();
		tfDesKey.clear();
		runDesScript(inputFile, key, isEncrypted);
		runRSAScript(key, isEncrypted);
		openFile(inputFile);
	}

	private boolean verifyDesKeyInput() {
		if (tfDesKey.getText().length() != 8) {
			printToTextAreaConsole("Wrong key size!!");
			return false;
		} else {
			printToTextAreaConsole("Valid Key Inserted");
			return true;
		}
	}

	private void openFileAction(Stage stage) {
		inputFile = fileChooser.showOpenDialog(stage);
		if (inputFile != null) {
			printToTextAreaConsole(inputFile.getAbsolutePath() + " is loaded!");
			buttonGo.setDisable(false);
			taConsole.clear();
			stage.setTitle("Enosh & Zuki Project - " + inputFile.getAbsolutePath());
		}else{
			buttonGo.setDisable(true);
		}
	}

	private void printToTextAreaConsole(String txt) {
		Platform.runLater(() -> taConsole.appendText(txt + "\n"));
	}

	private void runDesScript(File inputFile, String key, boolean isEncrypt) throws IOException, InterruptedException {
		String filePath = inputFile.getAbsolutePath();
		String tempFilePath = inputFile.getParent() + TEMP_FILE_NAME;
		printToTextAreaConsole("Starting DES");
		String perlScript = properties.getProperty("perlscript.des");
		int encrypt = isEncrypt ? 1 : 0;
		Process p = new ProcessBuilder("perl", perlScript, filePath, tempFilePath, key, Integer.toString(encrypt))
				.start();
		getProcessPrintAndAddToConsole(p);
		p.waitFor();
		File encryptedFile = new File(tempFilePath);
		Files.copy(encryptedFile.toPath(), inputFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
		printToTextAreaConsole("Done...");
	}

	private String runRSAScript(String text, boolean isEncrypt) throws IOException, InterruptedException {
		printToTextAreaConsole("Starting RSA");
		String rsaPerlScript = properties.getProperty("perlscript.rsa");
		String genKeyPerlScript = properties.getProperty("perlscript.genkey");
		String perlRun = properties.getProperty("perl.run");
		int encrypt = isEncrypt ? 1 : 0;
		String key;
		if (isEncrypt) {
			Process genKey = new ProcessBuilder(perlRun, genKeyPerlScript).redirectError(Redirect.INHERIT).start();
			printToTextAreaConsole("RSA Keys:");
			key = getProcessPrintAndAddToConsole(genKey);
			if (isAutoFillKeys) {
				tfRsaKeys.setText(key);
			}
			genKey.waitFor();
		} else {
			key = tfRsaKeys.getText();
		}
		Process rsa = new ProcessBuilder(perlRun, rsaPerlScript, Integer.toString(encrypt), key, text)
				.redirectError(Redirect.INHERIT).start();
		String msg = isEncrypt ? "Encrypted" : "Decrypted";
		printToTextAreaConsole(String.format("DES Key %s:", msg));
		String out = getProcessPrintAndAddToConsole(rsa);

		if (isAutoFillKeys) {
			if (isEncrypt) {
				tfCryptedDesKey.setText(out);
			} else {
				tfDesKey.setText(out);
			}
		}

		rsa.waitFor();
		printToTextAreaConsole("Done...");
		return out;
	}

	private String getProcessPrintAndAddToConsole(Process process) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		StringBuilder builder = new StringBuilder();
		String line = null;
		while ((line = reader.readLine()) != null) {
			builder.append(line);
			builder.append(System.getProperty("line.separator"));
		}
		String result = builder.toString();
		printToTextAreaConsole(result);
		return result;
	}

	private void openFile(File file) {
		try {
			desktop.open(file);
		} catch (IOException ex) {
			Logger.getLogger(UnixProjectUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private Properties loadProperties() {
		String propFileName = "./properties";
		try {
			InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(propFileName);
			if (in == null) {
				String errorMessage = String.format("Properties file %s could not be found", propFileName);
				printToTextAreaConsole(errorMessage);
				throw new RuntimeException(errorMessage);
			}
			Properties properties = new Properties();
			properties.load(in);
			return properties;
		} catch (IOException e) {
			String errorMessage = String.format("IOException in reading propoerty file: %s", propFileName);
			printToTextAreaConsole(errorMessage);
			throw new RuntimeException(errorMessage, e);
		}
	}

	private void setGuiForEncrypt() {
		enterRsaKeys.setVisible(false);
		tfRsaKeys.setVisible(false);
		enterCryptedKey.setVisible(false);
		tfCryptedDesKey.setVisible(false);
		textEnterKey.setVisible(true);
		tfDesKey.setVisible(true);
	}

	private void setGuiForDecrypt() {
		enterRsaKeys.setVisible(true);
		tfRsaKeys.setVisible(true);
		enterCryptedKey.setVisible(true);
		tfCryptedDesKey.setVisible(true);
		textEnterKey.setVisible(false);
		tfDesKey.setVisible(false);
	}

	public static void main(String[] args) throws IOException, InterruptedException {
		Application.launch(args);
	}
}